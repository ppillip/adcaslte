<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.skt.adcas.lte.dao.sql">
    <select id="diskStatus" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				 u.tablespace_name tableSpace
			    ,u.bytes / 1048576 sizeM
			    ,(u.bytes - sum(nvl(f.bytes,0))) / 1048576 usingM
				,(sum(nvl(f.bytes,0))) / 1048576 usableM
				,trunc((sum(nvl(f.bytes,0)) / u.bytes) * 100,2) usableRate
				,u.file_name AS fileName
			FROM DBA_FREE_SPACE f, DBA_DATA_FILES u
			WHERE f.file_id(+) = u.file_id
			GROUP BY u.tablespace_name, u.file_name, u.bytes
			ORDER BY u.tablespace_name
		]]>
	</select>
    <sql id="DownLinkByNMS.selectDailyCellTrafficORG">
        SELECT /*+ no_merge */
         YMD
        ,${MBTYPE + "_MB_TIME    "} AS MB_TIME
        ,INGR_ERP_CD
        ,C_UID
        ,CELL_ID
        ,MCID
        ,FREQ_KIND
        ,MFC_CD
        ,MIMO_TYPE
        ,round( ${MBTYPE + "_THROUGHPUT    "}   ,1) AS THROUGHPUT
        ,round( ${MBTYPE + "_CQI_AVERAGE   "}   ,1) AS CQI_AVERAGE
        ,round( ${MBTYPE + "_CQI0_RATE     "}   ,1) AS CQI0_RATE
        ,round( ${MBTYPE + "_RI_RATE       "}   ,1) AS RI_RATE
        ,round( ${MBTYPE + "_DL_PRB_RATE   "}   ,1) AS DL_PRB_RATE
        ,round( ${MBTYPE + "_MCS_AVERAGE   "}   ,1) AS MCS_AVERAGE       /* ss , nsn */
        ,round( ${MBTYPE + "_MIMO_RATE     "}   ,1) AS MIMO_RATE         /* elg, nsn */
        ,round( ${MBTYPE + "_RSSI          "}   ,1) AS RSSI              /*ss*/
        ,round( ${       "R2_RSSI          "}   ,1) AS R2_RSSI           /*ss*/
        ,round( ${MBTYPE + "_DL_THROUGHPUT "}   ,1) AS DL_THROUGHPUT     /*elg*/
        ,round( ${MBTYPE + "_LICENSE_FAIL  "}   ,1) AS LICENSE_FAIL      /*elg*/
        ,round( ${MBTYPE + "_PUCCH_AVG     "}   ,1) AS PUCCH_AVG         /*nsn*/
        ,round( ${       "R2_PUCCH_AVG     "}   ,1) AS R2_PUCCH_AVG      /*nsn*/
        ,round( ${MBTYPE + "_PUSCH_AVG     "}   ,1) AS PUSCH_AVG         /*nsn*/
        ,round( ${       "R2_PUSCH_AVG     "}   ,1) AS R2_PUSCH_AVG      /*nsn*/
        ,round( ${MBTYPE + "_PDCP_DL_MB    "}   ,1) AS PDCP_DL_MB
        ,round( ${MBTYPE + "_PRB_USG_RATE  "}   ,1) AS PRB_USG_RATE
        ,round( ${MBTYPE + "_DRB_USG_RATE  "}   ,1) AS DRB_USG_RATE
        ,round( ${MBTYPE + "_CON_TIME      "}   ,1) AS CON_TIME
        ,round( ${MBTYPE + "_TRY_CCNT      "}   ,1) AS TRY_CCNT
        ,round( ${MBTYPE + "_CON_RATE      "}   ,1) AS CON_RATE
        ,round( ${MBTYPE + "_CDC_RATE      "}   ,1) AS CDC_RATE
        ,round( ${MBTYPE + "_VOICE_DL_MB   "}   ,1) AS VOICE_DL_MB
        ,round( ${MBTYPE + "_VOICE_DL_PRB  "}   ,1) AS VOICE_DL_PRB
        ,round( ${MBTYPE + "_VOICE_TRY_CCNT"}   ,1) AS VOICE_TRY_CCNT
        ,round( ${MBTYPE + "_VOICE_TIME    "}   ,1) AS VOICE_TIME
        ,round( ${MBTYPE + "_IMAGE_DL_MB   "}   ,1) AS IMAGE_DL_MB
        ,round( ${MBTYPE + "_IMAGE_DL_PRB  "}   ,1) AS IMAGE_DL_PRB
        ,round( ${MBTYPE + "_IMAGE_TRY_CCNT"}   ,1) AS IMAGE_TRY_CCNT
        ,round( ${MBTYPE + "_IMAGE_TIME    "}   ,1) AS IMAGE_TIME
        ,round( ${MBTYPE + "_CQI_PDF_00    "}*100   ,1) AS CQI_PDF_00
        ,round( ${MBTYPE + "_CQI_PDF_01    "}*100   ,1) AS CQI_PDF_01
        ,round( ${MBTYPE + "_CQI_PDF_02    "}*100   ,1) AS CQI_PDF_02
        ,round( ${MBTYPE + "_CQI_PDF_03    "}*100   ,1) AS CQI_PDF_03
        ,round( ${MBTYPE + "_CQI_PDF_04    "}*100   ,1) AS CQI_PDF_04
        ,round( ${MBTYPE + "_CQI_PDF_05    "}*100   ,1) AS CQI_PDF_05
        ,round( ${MBTYPE + "_CQI_PDF_06    "}*100   ,1) AS CQI_PDF_06
        ,round( ${MBTYPE + "_CQI_PDF_07    "}*100   ,1) AS CQI_PDF_07
        ,round( ${MBTYPE + "_CQI_PDF_08    "}*100   ,1) AS CQI_PDF_08
        ,round( ${MBTYPE + "_CQI_PDF_09    "}*100   ,1) AS CQI_PDF_09
        ,round( ${MBTYPE + "_CQI_PDF_10    "}*100   ,1) AS CQI_PDF_10
        ,round( ${MBTYPE + "_CQI_PDF_11    "}*100   ,1) AS CQI_PDF_11
        ,round( ${MBTYPE + "_CQI_PDF_12    "}*100   ,1) AS CQI_PDF_12
        ,round( ${MBTYPE + "_CQI_PDF_13    "}*100   ,1) AS CQI_PDF_13
        ,round( ${MBTYPE + "_CQI_PDF_14    "}*100   ,1) AS CQI_PDF_14
        ,round( ${MBTYPE + "_CQI_PDF_15    "}*100   ,1) AS CQI_PDF_15
        ,round( ${MBTYPE + "_CQI_TOTAL     "}*100   ,1) AS CQI_TOTAL
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "}
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "}
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "}
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "}
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0)                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ,3) * 100  AS CQI_CDF_04
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0)                                                                                                                                                                                                                                                                                                                                                                                                                            ,3) * 100  AS CQI_CDF_05
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0)                                                                                                                                                                                                                                                                                                                                                                                   ,3) * 100  AS CQI_CDF_06
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_07    "} ,0)                                                                                                                                                                                                                                                                                                                                          ,3) * 100  AS CQI_CDF_07
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_07    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_08    "} ,0)                                                                                                                                                                                                                                                                                                 ,3) * 100  AS CQI_CDF_08
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_07    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_08    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_09    "} ,0)                                                                                                                                                                                                                                                        ,3) * 100  AS CQI_CDF_09
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_07    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_08    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_09    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_10    "} ,0)                                                                                                                                                                                                               ,3) * 100  AS CQI_CDF_10
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_07    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_08    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_09    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_10    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_11    "} ,0)                                                                                                                                                                      ,3) * 100  AS CQI_CDF_11
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_07    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_08    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_09    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_10    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_11    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_12    "} ,0)                                                                                                                             ,3) * 100  AS CQI_CDF_12
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_07    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_08    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_09    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_10    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_11    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_12    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_13    "} ,0)                                                                                    ,3) * 100  AS CQI_CDF_13
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_07    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_08    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_09    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_10    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_11    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_12    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_13    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_14    "} ,0)                                           ,3) * 100  AS CQI_CDF_14
        ,round( NVL( ${MBTYPE + "_CQI_PDF_00    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_01    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_02    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_03    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_04    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_05    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_06    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_07    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_08    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_09    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_10    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_11    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_12    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_13    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_14    "} ,0) + NVL( ${MBTYPE + "_CQI_PDF_15    "} ,0)  ,3) * 100  AS CQI_CDF_15

        FROM VIEW_LTE_CELL_${TERMTYPE}
        WHERE  YMD BETWEEN #{FROMYMD} AND #{TOYMD}
                AND DAYTIME_SEQ = #{DAYTIME_SEQ}
                <if test = "!FREQ_KIND.equalsIgnoreCase('ALL') and !FREQ_KIND.equalsIgnoreCase('')">
                AND FREQ_KIND = #{FREQ_KIND}
                </if>
                <if test = "!MFC_CD.equalsIgnoreCase('')">
                AND MFC_CD = #{MFC_CD}
                </if>

        /* CELL GROUP CONDITION START */
        <choose>
            <when test="SEARCHTYPE.equalsIgnoreCase('WORKGROUP')">
                AND (C_UID,INGR_ERP_CD) IN
                (
                    SELECT C_UID , INGR_ERP_CD
                    FROM LTE_WORK_GROUP_DU
                    WHERE WORKGROUP_ID = #{WORKGROUP_ID}
                /*AND USER_ID = 'qcas'*/
                )
            </when>
            <when test="SEARCHTYPE.equalsIgnoreCase('DULIST')">
                /* DULIST */
                AND (C_UID,INGR_ERP_CD) IN
                <foreach item="item" index="index" collection="DUIDs" open="(" separator="," close=")">
                    <![CDATA[
                          (
                           split(#{item},1,'_')
                          ,split(#{item},2,'_')
                          )
                        ]]>
                </foreach>
            </when>
            <when test="SEARCHTYPE.equalsIgnoreCase('SOLUTIONGROUP')">
                /* SOLUTIONGROUP */
                AND (C_UID,INGR_ERP_CD,CELL_ID,MCID) IN
                (
                   SELECT C_UID ,INGR_ERP_CD ,CELL_ID ,MCID
                     FROM LTE_SOLUTION_CELL
                    WHERE ymd  BETWEEN #{FROMYMD} AND #{TOYMD}
                      AND daytime_seq = #{DAYTIME_SEQ}
                      AND rtype_cd    = #{MBTYPE}
                      AND freq_kind   = #{FREQ_KIND}
                      AND part_cd     = #{PART_CD}
                      AND bad_type    = #{BAD_TYPE}
                )
            </when>
            <when test="SEARCHTYPE.equalsIgnoreCase('CELLLIST')">
                /* CELLLIST */
                AND (C_UID,INGR_ERP_CD,CELL_ID,MCID) IN
                <foreach item="item" index="index" collection="DUIDs" open="(" separator="," close=")">
                    <![CDATA[
                          (
                           split(#{item},1,'_')
                          ,split(#{item},2,'_')
                          ,split(#{item},3,'_')
                          ,split(#{item},4,'_')
                          )
                        ]]>
                </foreach>
            </when>
            <when test="SEARCHTYPE.equalsIgnoreCase('BONBU')">
                /*BONBU*/
            </when>
            <when test="SEARCHTYPE.equalsIgnoreCase('TEAM')">
                /*TEAM*/
            </when>
            <when test="SEARCHTYPE.equalsIgnoreCase('PART')">
                /*PART*/
                AND BONBU_CD = #{BONBU_CD}
                <if test="!OPER_TEAM_CD.equalsIgnoreCase('ALL')">
                AND OPER_TEAM_CD = #{OPER_TEAM_CD}
                </if>
                <if test="!PART_CD.equalsIgnoreCase('ALL') and !PART_CD.equalsIgnoreCase('')">
                AND PART_CD = #{PART_CD}
                </if>
            </when>
            <when test="SEARCHTYPE.equalsIgnoreCase('CITY')">/*CITY*/

            </when>
            <when test="SEARCHTYPE.equalsIgnoreCase('UNI')">/*UNI*/
                AND CITY_CD = #{CITY_CD}
            </when>
            <when test="SEARCHTYPE.equalsIgnoreCase('EMS')">/*EMS*/
                AND MME_GRP_ID = ${MME_GRP_ID}
                <if test="!NE_ID.equalsIgnoreCase('ALL')">
                AND NE_ID = #{NE_ID}
                </if>
            </when>
            <otherwise/>
        </choose>
        /* CELL GROUP CONDITION END */

    </sql>

    <sql id="DownLinkByNMS.sqlFromPartAVG">
            ,round(avg(ORG.THROUGHPUT     )  ,3)  AS THROUGHPUT
            ,round(avg(ORG.CQI_AVERAGE    )  ,3)  AS CQI_AVERAGE
            ,round(avg(ORG.CQI0_RATE      )  ,3)  AS CQI0_RATE
            ,round(avg(ORG.RI_RATE        )  ,3)  AS RI_RATE
            ,round(avg(ORG.DL_PRB_RATE    )  ,3)  AS DL_PRB_RATE
            ,round(avg(ORG.MCS_AVERAGE    )  ,3)  AS MCS_AVERAGE      /* ss , nsn */
            ,round(avg(ORG.MIMO_RATE      )  ,3)  AS MIMO_RATE        /* elg, nsn */
            ,round(avg(ORG.RSSI           )  ,3)  AS RSSI             /*ss*/
            ,round(avg(ORG.R2_RSSI        )  ,3)  AS R2_RSSI          /*ss*/
            ,round(avg(ORG.DL_THROUGHPUT  )  ,3)  AS DL_THROUGHPUT    /*elg*/
            ,round(avg(ORG.LICENSE_FAIL   )  ,3)  AS LICENSE_FAIL     /*elg*/
            ,round(avg(ORG.PUCCH_AVG      )  ,3)  AS PUCCH_AVG        /*nsn*/
            ,round(avg(ORG.R2_PUCCH_AVG   )  ,3)  AS R2_PUCCH_AVG     /*nsn*/
            ,round(avg(ORG.PUSCH_AVG      )  ,3)  AS PUSCH_AVG        /*nsn*/
            ,round(avg(ORG.R2_PUSCH_AVG   )  ,3)  AS R2_PUSCH_AVG     /*nsn*/
            ,round(avg(ORG.PDCP_DL_MB     )  ,3)  AS PDCP_DL_MB
            ,round(avg(ORG.PRB_USG_RATE   )  ,3)  AS PRB_USG_RATE
            ,round(avg(ORG.DRB_USG_RATE   )  ,3)  AS DRB_USG_RATE
            ,round(avg(ORG.CON_TIME       )  ,3)  AS CON_TIME
            ,round(avg(ORG.TRY_CCNT       )  ,3)  AS TRY_CCNT
            ,round(avg(ORG.CON_RATE       )  ,3)  AS CON_RATE
            ,round(avg(ORG.CDC_RATE       )  ,3)  AS CDC_RATE
            ,round(avg(ORG.VOICE_DL_MB    )  ,3)  AS VOICE_DL_MB
            ,round(avg(ORG.VOICE_DL_PRB   )  ,3)  AS VOICE_DL_PRB
            ,round(avg(ORG.VOICE_TRY_CCNT )  ,3)  AS VOICE_TRY_CCNT
            ,round(avg(ORG.VOICE_TIME     )  ,3)  AS VOICE_TIME
            ,round(avg(ORG.IMAGE_DL_MB    )  ,3)  AS IMAGE_DL_MB
            ,round(avg(ORG.IMAGE_DL_PRB   )  ,3)  AS IMAGE_DL_PRB
            ,round(avg(ORG.IMAGE_TRY_CCNT )  ,3)  AS IMAGE_TRY_CCNT
            ,round(avg(ORG.IMAGE_TIME     )  ,3)  AS IMAGE_TIME
            ,round(avg(ORG.CQI_PDF_00     )  ,1)  AS CQI_PDF_00
            ,round(avg(ORG.CQI_PDF_01     )  ,1)  AS CQI_PDF_01
            ,round(avg(ORG.CQI_PDF_02     )  ,1)  AS CQI_PDF_02
            ,round(avg(ORG.CQI_PDF_03     )  ,1)  AS CQI_PDF_03
            ,round(avg(ORG.CQI_PDF_04     )  ,1)  AS CQI_PDF_04
            ,round(avg(ORG.CQI_PDF_05     )  ,1)  AS CQI_PDF_05
            ,round(avg(ORG.CQI_PDF_06     )  ,1)  AS CQI_PDF_06
            ,round(avg(ORG.CQI_PDF_07     )  ,1)  AS CQI_PDF_07
            ,round(avg(ORG.CQI_PDF_08     )  ,1)  AS CQI_PDF_08
            ,round(avg(ORG.CQI_PDF_09     )  ,1)  AS CQI_PDF_09
            ,round(avg(ORG.CQI_PDF_10     )  ,1)  AS CQI_PDF_10
            ,round(avg(ORG.CQI_PDF_11     )  ,1)  AS CQI_PDF_11
            ,round(avg(ORG.CQI_PDF_12     )  ,1)  AS CQI_PDF_12
            ,round(avg(ORG.CQI_PDF_13     )  ,1)  AS CQI_PDF_13
            ,round(avg(ORG.CQI_PDF_14     )  ,1)  AS CQI_PDF_14
            ,round(avg(ORG.CQI_PDF_15     )  ,1)  AS CQI_PDF_15
            ,round(avg(ORG.CQI_TOTAL      )  ,1)  AS CQI_TOTAL
            ,round(avg(ORG.CQI_CDF_00     )  ,1)  AS CQI_CDF_00
            ,round(avg(ORG.CQI_CDF_01     )  ,1)  AS CQI_CDF_01
            ,round(avg(ORG.CQI_CDF_02     )  ,1)  AS CQI_CDF_02
            ,round(avg(ORG.CQI_CDF_03     )  ,1)  AS CQI_CDF_03
            ,round(avg(ORG.CQI_CDF_04     )  ,1)  AS CQI_CDF_04
            ,round(avg(ORG.CQI_CDF_05     )  ,1)  AS CQI_CDF_05
            ,round(avg(ORG.CQI_CDF_06     )  ,1)  AS CQI_CDF_06
            ,round(avg(ORG.CQI_CDF_07     )  ,1)  AS CQI_CDF_07
            ,round(avg(ORG.CQI_CDF_08     )  ,1)  AS CQI_CDF_08
            ,round(avg(ORG.CQI_CDF_09     )  ,1)  AS CQI_CDF_09
            ,round(avg(ORG.CQI_CDF_10     )  ,1)  AS CQI_CDF_10
            ,round(avg(ORG.CQI_CDF_11     )  ,1)  AS CQI_CDF_11
            ,round(avg(ORG.CQI_CDF_12     )  ,1)  AS CQI_CDF_12
            ,round(avg(ORG.CQI_CDF_13     )  ,1)  AS CQI_CDF_13
            ,round(avg(ORG.CQI_CDF_14     )  ,1)  AS CQI_CDF_14
            ,round(avg(ORG.CQI_CDF_15     )  ,1)  AS CQI_CDF_15
    </sql>

    <sql id="DownLinkByNMS.sqlFromPartSummary">
        NUM AS SRT
        ,DECODE(NUM,1,round(avg(THROUGHPUT     )  ,3),2,round(max(THROUGHPUT     )  ,3),3,round(min(THROUGHPUT     )  ,3),4,round(stddev(THROUGHPUT     )  ,3)) AS THROUGHPUT
        ,DECODE(NUM,1,round(avg(CQI_AVERAGE    )  ,3),2,round(max(CQI_AVERAGE    )  ,3),3,round(min(CQI_AVERAGE    )  ,3),4,round(stddev(CQI_AVERAGE    )  ,3)) AS CQI_AVERAGE
        ,DECODE(NUM,1,round(avg(CQI0_RATE      )  ,3),2,round(max(CQI0_RATE      )  ,3),3,round(min(CQI0_RATE      )  ,3),4,round(stddev(CQI0_RATE      )  ,3)) AS CQI0_RATE
        ,DECODE(NUM,1,round(avg(RI_RATE        )  ,3),2,round(max(RI_RATE        )  ,3),3,round(min(RI_RATE        )  ,3),4,round(stddev(RI_RATE        )  ,3)) AS RI_RATE
        ,DECODE(NUM,1,round(avg(DL_PRB_RATE    )  ,3),2,round(max(DL_PRB_RATE    )  ,3),3,round(min(DL_PRB_RATE    )  ,3),4,round(stddev(DL_PRB_RATE    )  ,3)) AS DL_PRB_RATE
        ,DECODE(NUM,1,round(avg(MCS_AVERAGE    )  ,3),2,round(max(MCS_AVERAGE    )  ,3),3,round(min(MCS_AVERAGE    )  ,3),4,round(stddev(MCS_AVERAGE    )  ,3)) AS MCS_AVERAGE             /* ss , nsn */
        ,DECODE(NUM,1,round(avg(MIMO_RATE      )  ,3),2,round(max(MIMO_RATE      )  ,3),3,round(min(MIMO_RATE      )  ,3),4,round(stddev(MIMO_RATE      )  ,3)) AS MIMO_RATE               /* elg, nsn */
        ,DECODE(NUM,1,round(avg(RSSI           )  ,3),2,round(max(RSSI           )  ,3),3,round(min(RSSI           )  ,3),4,round(stddev(RSSI           )  ,3)) AS RSSI                    /*ss*/
        ,DECODE(NUM,1,round(avg(R2_RSSI        )  ,3),2,round(max(R2_RSSI        )  ,3),3,round(min(R2_RSSI        )  ,3),4,round(stddev(R2_RSSI        )  ,3)) AS R2_RSSI                 /*ss*/
        ,DECODE(NUM,1,round(avg(DL_THROUGHPUT  )  ,3),2,round(max(DL_THROUGHPUT  )  ,3),3,round(min(DL_THROUGHPUT  )  ,3),4,round(stddev(DL_THROUGHPUT  )  ,3)) AS DL_THROUGHPUT           /*elg*/
        ,DECODE(NUM,1,round(avg(LICENSE_FAIL   )  ,3),2,round(max(LICENSE_FAIL   )  ,3),3,round(min(LICENSE_FAIL   )  ,3),4,round(stddev(LICENSE_FAIL   )  ,3)) AS LICENSE_FAIL            /*elg*/
        ,DECODE(NUM,1,round(avg(PUCCH_AVG      )  ,3),2,round(max(PUCCH_AVG      )  ,3),3,round(min(PUCCH_AVG      )  ,3),4,round(stddev(PUCCH_AVG      )  ,3)) AS PUCCH_AVG               /*nsn*/
        ,DECODE(NUM,1,round(avg(R2_PUCCH_AVG   )  ,3),2,round(max(R2_PUCCH_AVG   )  ,3),3,round(min(R2_PUCCH_AVG   )  ,3),4,round(stddev(R2_PUCCH_AVG   )  ,3)) AS R2_PUCCH_AVG            /*nsn*/
        ,DECODE(NUM,1,round(avg(PUSCH_AVG      )  ,3),2,round(max(PUSCH_AVG      )  ,3),3,round(min(PUSCH_AVG      )  ,3),4,round(stddev(PUSCH_AVG      )  ,3)) AS PUSCH_AVG               /*nsn*/
        ,DECODE(NUM,1,round(avg(R2_PUSCH_AVG   )  ,3),2,round(max(R2_PUSCH_AVG   )  ,3),3,round(min(R2_PUSCH_AVG   )  ,3),4,round(stddev(R2_PUSCH_AVG   )  ,3)) AS R2_PUSCH_AVG            /*nsn*/
        ,DECODE(NUM,1,round(avg(PDCP_DL_MB     )  ,3),2,round(max(PDCP_DL_MB     )  ,3),3,round(min(PDCP_DL_MB     )  ,3),4,round(stddev(PDCP_DL_MB     )  ,3)) AS PDCP_DL_MB
        ,DECODE(NUM,1,round(avg(PRB_USG_RATE   )  ,3),2,round(max(PRB_USG_RATE   )  ,3),3,round(min(PRB_USG_RATE   )  ,3),4,round(stddev(PRB_USG_RATE   )  ,3)) AS PRB_USG_RATE
        ,DECODE(NUM,1,round(avg(DRB_USG_RATE   )  ,3),2,round(max(DRB_USG_RATE   )  ,3),3,round(min(DRB_USG_RATE   )  ,3),4,round(stddev(DRB_USG_RATE   )  ,3)) AS DRB_USG_RATE
        ,DECODE(NUM,1,round(avg(CON_TIME       )  ,3),2,round(max(CON_TIME       )  ,3),3,round(min(CON_TIME       )  ,3),4,round(stddev(CON_TIME       )  ,3)) AS CON_TIME
        ,DECODE(NUM,1,round(avg(TRY_CCNT       )  ,3),2,round(max(TRY_CCNT       )  ,3),3,round(min(TRY_CCNT       )  ,3),4,round(stddev(TRY_CCNT       )  ,3)) AS TRY_CCNT
        ,DECODE(NUM,1,round(avg(CON_RATE       )  ,3),2,round(max(CON_RATE       )  ,3),3,round(min(CON_RATE       )  ,3),4,round(stddev(CON_RATE       )  ,3)) AS CON_RATE
        ,DECODE(NUM,1,round(avg(CDC_RATE       )  ,3),2,round(max(CDC_RATE       )  ,3),3,round(min(CDC_RATE       )  ,3),4,round(stddev(CDC_RATE       )  ,3)) AS CDC_RATE
        ,DECODE(NUM,1,round(avg(VOICE_DL_MB    )  ,3),2,round(max(VOICE_DL_MB    )  ,3),3,round(min(VOICE_DL_MB    )  ,3),4,round(stddev(VOICE_DL_MB    )  ,3)) AS VOICE_DL_MB
        ,DECODE(NUM,1,round(avg(VOICE_DL_PRB   )  ,3),2,round(max(VOICE_DL_PRB   )  ,3),3,round(min(VOICE_DL_PRB   )  ,3),4,round(stddev(VOICE_DL_PRB   )  ,3)) AS VOICE_DL_PRB
        ,DECODE(NUM,1,round(avg(VOICE_TRY_CCNT )  ,3),2,round(max(VOICE_TRY_CCNT )  ,3),3,round(min(VOICE_TRY_CCNT )  ,3),4,round(stddev(VOICE_TRY_CCNT )  ,3)) AS VOICE_TRY_CCNT
        ,DECODE(NUM,1,round(avg(VOICE_TIME     )  ,3),2,round(max(VOICE_TIME     )  ,3),3,round(min(VOICE_TIME     )  ,3),4,round(stddev(VOICE_TIME     )  ,3)) AS VOICE_TIME
        ,DECODE(NUM,1,round(avg(IMAGE_DL_MB    )  ,3),2,round(max(IMAGE_DL_MB    )  ,3),3,round(min(IMAGE_DL_MB    )  ,3),4,round(stddev(IMAGE_DL_MB    )  ,3)) AS IMAGE_DL_MB
        ,DECODE(NUM,1,round(avg(IMAGE_DL_PRB   )  ,3),2,round(max(IMAGE_DL_PRB   )  ,3),3,round(min(IMAGE_DL_PRB   )  ,3),4,round(stddev(IMAGE_DL_PRB   )  ,3)) AS IMAGE_DL_PRB
        ,DECODE(NUM,1,round(avg(IMAGE_TRY_CCNT )  ,3),2,round(max(IMAGE_TRY_CCNT )  ,3),3,round(min(IMAGE_TRY_CCNT )  ,3),4,round(stddev(IMAGE_TRY_CCNT )  ,3)) AS IMAGE_TRY_CCNT
        ,DECODE(NUM,1,round(avg(IMAGE_TIME     )  ,3),2,round(max(IMAGE_TIME     )  ,3),3,round(min(IMAGE_TIME     )  ,3),4,round(stddev(IMAGE_TIME     )  ,3)) AS IMAGE_TIME
    </sql>


    <select id="DownLinkByNMS.selectDailyCellTraffic" parameterType="hashmap" resultType="hashmap">

        select
           ROWNUM AS ROWIDX
          ,du.BTS_NM             AS BTS_NM
          ,cell.CELL_NM          AS CELL_NM
          ,data.*
        from (
          <include refid="DownLinkByNMS.selectDailyCellTrafficORG"/>
        ) data , LTE_BTS_DU_INFO du , LTE_BTS_CELL_INFO cell
        where
        data.INGR_ERP_CD  = du.INGR_ERP_CD
        and data.C_UID        = du.C_UID
        and data.INGR_ERP_CD  = cell.INGR_ERP_CD
        and data.C_UID        = cell.C_UID
        and data.CELL_ID      = cell.CELL_ID
        order by data.YMD ASC, data.INGR_ERP_CD asc ,data.C_UID ASC ,data.CELL_ID ,data.MCID ASC
    </select>

    <select id="DownLinkByNMS.selectDailyCellTrafficAVG" parameterType="hashmap" resultType="hashmap">
        select du.BTS_NM,cell.CELL_NM, data.* from (
            SELECT
             SUBSTR(#{FROMYMD},7,2) || '~' || SUBSTR(#{TOYMD},7,2) AS YMD
            ,'-'                                  AS MB_TIME
            ,ORG.INGR_ERP_CD                      AS INGR_ERP_CD
            ,ORG.C_UID                            AS C_UID
            ,ORG.CELL_ID                          AS CELL_ID
            ,ORG.MCID                             AS MCID
            ,ORG.FREQ_KIND                        AS FREQ_KIND
             <include refid="DownLinkByNMS.sqlFromPartAVG"/>
        FROM (
               <include refid="DownLinkByNMS.selectDailyCellTrafficORG"/>
            ) ORG
            GROUP BY INGR_ERP_CD,C_UID,CELL_ID,MCID,FREQ_KIND

        ) data , LTE_BTS_DU_INFO du , LTE_BTS_CELL_INFO cell
        where
        data.INGR_ERP_CD  = du.INGR_ERP_CD
        and data.C_UID        = du.C_UID
        and data.INGR_ERP_CD  = cell.INGR_ERP_CD
        and data.C_UID        = cell.C_UID
        and data.CELL_ID      = cell.CELL_ID
        order by  data.YMD DESC, data.INGR_ERP_CD asc ,data.C_UID ASC ,data.CELL_ID ,data.MCID ASC
    </select>

    <select id="DownLinkByNMS.selectDailyCellTrafficSummaryAVG" parameterType="hashmap" resultType="hashmap">

        SELECT
        <include refid="DownLinkByNMS.sqlFromPartSummary"/>
        FROM (
            /*copy and paste from core of DownLinkByNMS.selectDailyCellTrafficAVG */
            SELECT
            '-'                     AS YMD
            ,'-'                     AS MB_TIME
            ,ORG.INGR_ERP_CD          AS INGR_ERP_CD
            ,ORG.C_UID                AS C_UID
            ,ORG.CELL_ID              AS CELL_ID
            ,ORG.MCID                 AS MCID
            ,ORG.FREQ_KIND            AS FREQ_KIND
            <include refid="DownLinkByNMS.sqlFromPartAVG"/>
            FROM (
            <include refid="DownLinkByNMS.selectDailyCellTrafficORG"/>
            ) ORG
            GROUP BY INGR_ERP_CD,C_UID,CELL_ID,MCID,FREQ_KIND

        )  V,
        <![CDATA[
        (SELECT LEVEL NUM FROM DUAL CONNECT BY LEVEL <=4) N
        ]]>
        GROUP BY NUM
        order by 1
    </select>



    <sql id="BigDownload.selectBasicDataORG">
        select
        ROWNUM AS ROWIDX
        ,du.BTS_NM             AS BTS_NM
        ,cell.CELL_NM          AS CELL_NM
        ,data.*
        from (
        <include refid="DownLinkByNMS.selectDailyCellTrafficORG"/>
        ) data , LTE_BTS_DU_INFO du , LTE_BTS_CELL_INFO cell
        where
        data.INGR_ERP_CD  = du.INGR_ERP_CD
        and data.C_UID        = du.C_UID
        and data.INGR_ERP_CD  = cell.INGR_ERP_CD
        and data.C_UID        = cell.C_UID
        and data.CELL_ID      = cell.CELL_ID
        /* <![CDATA[ and ROWNUM < 10 ]]> */
        order by data.YMD ASC, data.INGR_ERP_CD asc ,data.C_UID ASC ,data.CELL_ID ,data.MCID ASC
    </sql>

    <select id="BigDownload.selectBasicData_EMS" parameterType="hashmap" resultType="hashmap">
        <include refid="BigDownload.selectBasicDataORG"/>
    </select>

    <select id="BigDownload.selectBasicData_PART" parameterType="hashmap" resultType="hashmap">
        <include refid="BigDownload.selectBasicDataORG"/>
    </select>

    <select id="BigDownload.selectBasicData_UNI" parameterType="hashmap" resultType="hashmap">
        <include refid="BigDownload.selectBasicDataORG"/>
    </select>

</mapper>